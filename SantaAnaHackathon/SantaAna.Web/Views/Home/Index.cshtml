@{
    ViewBag.Title = "Home Page";
}
<style>
    .tag {
        background-color: #857977;
        border: none;
        color: white;
        padding: 7px 7px;
        border-radius: 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 13px;
        margin: 3px;
    }
</style>

<div class="container" ng-controller="serviceController as serv">
    <h4>Message from the developers: </h4>
    <p>Hi there, this is our representation of the Youth Services App by by Moises Vazquez. What the current site allows you to do is to first see the <strong>Services</strong> that are posted by local people. The second feature is the actual posting of the <strong>service</strong>. We wanted it to only be limited to be created by a group of admins that would be invited after the product owner verifies that the admin is from a legitimate source. However, we were not able to implement security features and validations in our first iteration. Lastly, the site allows you to search all the events through <em>tags</em> and filter the results to narrow down your results.</p>
    <p>The site may not be pretty but this application should be very scalable, mobile friendly, deployable and has a fully functioning database that holds real data.</p>
    <p>For your first test, why don't you try having Club and Kids as Tags, it should limit the amount of results.</p>
    <p>The manage tab will allow you to post your very own listing for the website. If you choose to create one, please fill out <strong>ALL</strong> the fields. Thank you!</p>

    <!-- SEARCH BAR -->
    <div class="row" style="display: inline">
        <div class="col-md-2"></div>
        <div class="col-md-8">
            <br />
            <label for="jobSkillTags">Search By Tag(s)</label>
            <tags-input ng-model="serv.currentTags" display-property="name" add-from-autocomplete-only="true" on-tag-added="serv.tagCheck()" on-tag-removed="serv.tagCheck()">
                <auto-complete source="serv.currentTagsFilter($query)" load-on-focus="true" load-on-empty="true"></auto-complete>
            </tags-input>
        </div>
        <div class="col-md-2"></div>
    </div>

    <!-- SERVICE LISTINGS -->
    <div class="row" ng-repeat="item in serv.items">
        <div class="col-md-2"></div>
        <div class="col-md-8">

            <a href="/about/{{item.Id}}">
                <h3>{{item.Name}}</h3>
            </a>
            <p>{{item.Description}}</p>
            <ul class="list-inline" style="list-style:none">
                <li ng-repeat="tag in item.Tags">
                    <p class="tag" ng-bind="tag.Name || tag.name"></p>
                </li>
            </ul>
            <hr />

        </div>
        <div class="col-md-2"></div>
    </div>


</div><!-- container -->

@section scripts {
    <script type="text/javascript">

        // Factory
        (function () {
            "use strict";

            angular.module('myApp')
                .factory('$serviceService', ServiceService)

            ServiceService.$inject = ['$http']

            function ServiceService($http) {
                return {
                    getServices: _getServices,
                    getTags: _getTags,
                    getServiceByTag: _getServiceByTag
                }

                function _getServices() {
                    return $http.get('/api/main/')
                        .then(onSuccessGetAll)
                }

                function _getTags() {
                    return $http.get('/api/main/tags')
                        .then(onSuccessGetTags)
                }

                function _getServiceByTag(data) {
                    return $http.post('/api/main/ServiceByTag', data)
                        .then(onGetServiceByTagsSuccess);
                }


                function onSuccessGetAll(response) {
                    return response.data;
                }

                function onSuccessGetTags(response) {
                    return response.data;
                }
                function onGetServiceByTagsSuccess(response) {
                    return response.data;
                }
            }
        })();

        // Controller
        (function () {
            "use strict";

            angular.module('myApp')
                .controller("serviceController", ServiceController)

            ServiceController.$inject = ['$scope', "$serviceService"]

            function ServiceController($scope, $serviceService) {

                var vm = this;

                // All Tags that are populated on startup.

                vm.$scope = $scope;
                vm.$serviceService = $serviceService;
                vm.currentTagsFilter = _currentTagsFilter;
                vm.hydratePage = _hydratePage;
                vm.getAllEntries = _getAllEntries;
                vm.getAllTags = _getAllTags;
                vm.hydrateTags = _hydrateTags;
                vm.onServiceGetByTagsSuccess = _onServiceGetByTagsSuccess;
                vm.tagCheck = _tagCheck;
                vm.allTags = [];
                vm.items;
                vm.currentTags = [];
                render();

                function render() {
                    vm.getAllEntries();
                    vm.getAllTags();

                }
                function _getAllEntries() {
                    return vm.$serviceService.getServices()
                        .then(vm.hydratePage)
                }

                function _hydratePage(data) {
                    vm.items = data.Items;
                    console.log(vm.items);
                }

                function _getAllTags() {
                    return vm.$serviceService.getTags()
                        .then(vm.hydrateTags)
                }

                function _hydrateTags(data) {
                    for (var i = 0; i < data.Items.length; i++) {
                        vm.allTags.push({ name: data.Items[i].Name })
                    }
                    console.log(vm.allTags);


                }

                function _tagCheck() {
                    // Run Get Call, sending in  tags.
                    console.log(vm.currentTags);

                    if (vm.currentTags.length < 1) {
                        return vm.$serviceService.getServices()
                            .then(vm.hydratePage)
                    }
                    $serviceService.getServiceByTag(vm.currentTags)
                        .then(vm.onServiceGetByTagsSuccess);
                }

                // Autocomplete function tags
                function _currentTagsFilter($query) {
                    var tags = vm.allTags;

                    return tags.filter(function (tag) {
                        return tag.name.toLowerCase().indexOf($query.toLowerCase()) != -1;
                    })
                }

                function _onServiceGetByTagsSuccess(response) {
                    vm.items = response.Items;
                    console.log(vm.items);
                }
            }

        })();

    </script>
}

